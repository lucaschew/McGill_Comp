%% Q3) Lucas-Kanade Optical Flow

im1 = imread("Backyard\frame07.png");
im2 = imread("Backyard\frame08.png");

im1_d = im2gray(im2double(im1));
im2_d = im2gray(im2double(im2));

% Parameters

sigma = 4;
vectorSpacing = 10;
magnification = 10;
[sizeY, sizeX] = size(im1_d);

% Solve the equation
% Motion Field = Inverse of original position array * The amount moved (t)

% Inverse of Original Position Array with guass filter of sigma
% Applying 2D Gaussian to image
gauss2D = imgaussfilt(im1_d, sigma);
[im_x_2d, im_y_2d] = gradient(gauss2D);

originalPosArr = [ sum(im_x.^2, "all"), sum(im_x.*im_y, "all");
                   sum(im_x.*im_y, "all"), sum(im_y.^2, "all")];

originalPosArr = inv(originalPosArr);

% The amount moved (t)
imDiff = im1_d - im2_d;

% Applying 1D gaussian to each row
gauss1D = gaussmf(sizeX, [sigma, sizeX/2]);
gauss1D = gauss1D/sum(gauss1D);




motionField_x = zeros(size(im1_d));
motionField_y = zeros(size(im1_d));

for x = 1 : length(im1_d(1, :))

    for y = 1 : length(im1_d(:, 1))

        pointDiff = imDiff(y, x);

        motionArr = -1.*[sum((im_x.*pointDiff), "all"); 
                         sum((im_y.*pointDiff), "all")];

        motionField_x(y, x) = motionArr(1);
        motionField_y(y, x) = motionArr(2);

    end

end


%%

small_MFX = motionField_x(1:spacing:end, 10:spacing:end).*magnification;
small_MFY = motionField_y(1:spacing:end, 10:spacing:end).*magnification;

[X,Y] = meshgrid(1:spacing:sizeX, 1:spacing:sizeY);

imshow(im1);
hold on;
quiver(X, Y, small_MFX, small_MFY, 'y');
hold off;